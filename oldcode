// import React from 'react';
// import { Text, View, StyleSheet, Platform } from 'react-native';

// /**
//  * Function that calculates rotation of the semicircle for firstProgressLayer
//  * ( when percent is less than equal to 50 ) or for the secondProgressLayer
//  * when percent is greater than 50.
//  **/
// const rotateByStyle = (percent, base_degrees, clockwise) => {
//   let rotateBy = base_degrees;
//   if (clockwise) {
//     rotateBy = base_degrees + percent * 3.6;
//   } else {
//     //anti clockwise progress
//     rotateBy = base_degrees - percent * 3.6;
//   }
//   return {
//     transform: [{ rotateZ: `${rotateBy}deg` }],
//   };
// };

// const renderThirdLayer = (
//   percent,
//   commonStyles,
//   ringColorStyle,
//   ringBgColorStyle,
//   clockwise,
//   bgRingWidth,
//   progressRingWidth,
//   innerRingStyle,
//   startDegrees,
// ) => {
//   let rotation = 45 + startDegrees;
//   let offsetLayerRotation = -135 + startDegrees;
//   if (!clockwise) {
//     rotation += 180;
//     offsetLayerRotation += 180;
//   }
//   if (percent > 50) {
//     /**
//      * Third layer circles default rotation is kept 45 degrees for clockwise rotation, so by default it occupies the right half semicircle.
//      * Since first 50 percent is already taken care  by second layer circle, hence we subtract it
//      * before passing to the rotateByStyle function
//      **/

//     return (
//       <View
//         style={[
//           styles.secondProgressLayer,
//           rotateByStyle(percent - 50, rotation, clockwise),
//           commonStyles,
//           ringColorStyle,
//         ]}
//       />
//     );
//   } else {
//     return (
//       <View
//         style={[
//           styles.offsetLayer,
//           innerRingStyle,
//           ringBgColorStyle,
//           { transform: [{ rotateZ: `${offsetLayerRotation}deg` }] },
//         ]}
//       />
//     );
//   }
// };

// const CircularProgress = ({
//   percent,
//   radius,
//   bgRingWidth,
//   progressRingWidth,
//   ringColor,
//   ringBgColor,
//   textFontSize,
//   textFontWeight,
//   textFontColor,
//   clockwise,
//   bgColor,
//   startDegrees,
// }) => {
//   const commonStyles = {
//     width: radius * 2,
//     height: radius * 2,
//     borderRadius: radius,
//     borderTopWidth: progressRingWidth,
//     borderLeftWidth: progressRingWidth,
//     borderBottomWidth: progressRingWidth,
//     borderRightWidth: progressRingWidth,
//   };

//   /**
//    * Calculate radius for base layer and offset layer.
//    * If progressRingWidth == bgRingWidth, innerRadius is equal to radius
//    **/
//   const widthDiff = progressRingWidth - bgRingWidth;
//   const innerRadius = radius - progressRingWidth + bgRingWidth + widthDiff / 2;

//   const innerRingStyle = {
//     width: innerRadius * 2,
//     height: innerRadius * 2,
//     borderRadius: innerRadius,
//     borderTopWidth: bgRingWidth,
//     borderLeftWidth: bgRingWidth,
//     borderBottomWidth: bgRingWidth,
//     borderRightWidth: bgRingWidth,
//   };

//   const ringColorStyle = {
//     borderRightColor: ringColor,
//     borderTopColor: ringColor,
//   };

//   const ringBgColorStyle = {
//     borderRightColor: ringBgColor,
//     borderTopColor: ringBgColor,
//   };

//   const thickOffsetRingStyle = {
//     borderRightColor: bgColor,
//     borderTopColor: bgColor,
//   };

//   let rotation = -135 + startDegrees;
//   /**
//    * If we want our ring progress to be displayed in anti-clockwise direction
//    **/
//   if (!clockwise) {
//     rotation += 180;
//   }
//   let firstProgressLayerStyle;
//   /* when ther ring's border widths are different and percent is less than 50, then we need an offsetLayer
//    * before the original offser layer to avoid ring color of the thick portion to be visible in the background.
//    */
//   let displayThickOffsetLayer = false;
//   if (percent > 50) {
//     firstProgressLayerStyle = rotateByStyle(50, rotation, clockwise);
//   } else {
//     firstProgressLayerStyle = rotateByStyle(percent, rotation, clockwise);
//     if (progressRingWidth > bgRingWidth) {
//       displayThickOffsetLayer = true;
//     }
//   }

//   let offsetLayerRotation = -135 + startDegrees;
//   if (!clockwise) {
//     offsetLayerRotation += 180;
//   }

//   return (
//       <View>
//     <Text>Hi</Text>

//     <View style={[styles.container, { width: radius * 2, height: radius * 2 }]}>
//       <View
//         style={[
//           styles.baselayer,
//           innerRingStyle,
//           { borderColor: ringBgColor, borderWidth: bgRingWidth },
//         ]}
//       />
//       <View
//         style={[
//           styles.firstProgressLayer,
//           firstProgressLayerStyle,
//           commonStyles,
//           ringColorStyle,
//           {
//             borderTopWidth: progressRingWidth,
//             borderRightWidth: progressRingWidth,
//           },
//         ]}
//       />
//       {displayThickOffsetLayer && (
//         <View
//           style={[
//             styles.offsetLayer,
//             commonStyles,
//             thickOffsetRingStyle,
//             {
//               transform: [{ rotateZ: `${offsetLayerRotation}deg` }],
//               borderWidth: progressRingWidth,
//             },
//           ]}
//         />
//       )}
//       {renderThirdLayer(
//         percent,
//         commonStyles,
//         ringColorStyle,
//         ringBgColorStyle,
//         clockwise,
//         bgRingWidth,
//         progressRingWidth,
//         innerRingStyle,
//         startDegrees,
//       )}
//       <Text
//         style={[
//           styles.display,
//           {
//             fontSize: textFontSize,
//             fontWeight: textFontWeight,
//             color: textFontColor,
//           },
//         ]}>
//         {percent/10}
//       </Text>
//       <Text style={styles.displaySubText}> 10 Refills</Text>
//     </View>
//     </View>
//   );
// };

// // default values for props
// CircularProgress.defaultProps = {
//   percent: 0,
//   radius: 100,
//   bgRingWidth: 12,
//   progressRingWidth: 6,
//   ringColor: '#e7e7e7',
//   ringBgColor: 'grey',
//   textFontSize: 40,
//   textFontColor: 'black',
//   textFontWeight: 'bold',
//   clockwise: true,
//   bgColor: 'white',
//   startDegrees: 0,
// };

// /**
//  * offsetLayer has transform:[{rotateZ: '-135deg'}] since
//  * the offsetLayer rotation is fixed by us.
//  **/
// const styles = StyleSheet.create({
//   container: {
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   baselayer: {
//     position: 'absolute',
//   },
//   firstProgressLayer: {
//     position: 'absolute',
//     borderLeftColor: 'transparent',
//     borderBottomColor: 'transparent',

//   },
//   secondProgressLayer: {
//     position: 'absolute',
//     borderLeftColor: 'transparent',
//     borderBottomColor: 'transparent',
//   },
//   offsetLayer: {
//     position: 'absolute',
//     borderLeftColor: 'transparent',
//     borderBottomColor: 'transparent',

//   },
//   display: {
//     position: 'absolute',
//     color:'#2FBB89'
//   },
//   displaySubText:{
//       position:'absolute',
//       bottom: 60
//   }
// });

// export default CircularProgress;


// import React, { useEffect, useRef } from 'react';
// import { StyleSheet, View, TextInput, Animated, Text } from 'react-native';
// import PropTypes from 'prop-types';
// import Svg, { G, Circle, Defs, LinearGradient, Stop } from 'react-native-svg';
// import { styles } from './StyleSheet';

// const AnimatedCircle = Animated.createAnimatedComponent(Circle);
// const AnimatedInput = Animated.createAnimatedComponent(TextInput);

// const CircularProgress = (props) => {
//   const {
//     value,
//     initialValue,
//     radius,
//     duration,
//     delay,
//     textColor,
//     textStyle,
//     fontSize,
//     maxValue,
//     strokeLinecap,
//     onAnimationComplete,
//     valuePrefix,
//     valueSuffix,
//     activeStrokeColor,
//     activeStrokeSecondaryColor,
//     activeStrokeWidth,
//     inActiveStrokeColor,
//     inActiveStrokeWidth,
//     inActiveStrokeOpacity,
//     showProgressValue
//   } = props;

//   const styleProps = {
//     radius,
//     textColor,
//     fontSize,
//     textStyle,
//     activeStrokeColor
//   };

//   const animatedValue = useRef(new Animated.Value(initialValue)).current;
//   const circleRef = useRef();
//   const inputRef = useRef();

//   const halfCircle = radius + Math.max(activeStrokeWidth, inActiveStrokeWidth);
//   const circleCircumference = 2 * Math.PI * radius;
//   const animation = (toValue) => {
//     return Animated.timing(animatedValue, {
//       toValue,
//       duration,
//       delay,
//       useNativeDriver: true,
//     }).start();
//   };

//   useEffect(() => {
//     animation(value);
//     animatedValue.addListener((v) => {
//       if (circleRef?.current) {
//         const biggestValue = Math.max(initialValue, maxValue);
//         const maxPerc = (100 * v.value) / biggestValue;
//         const strokeDashoffset =
//           circleCircumference - (circleCircumference * maxPerc) / 100;
//         circleRef?.current?.setNativeProps({
//           strokeDashoffset,
//         });
//       }
//       if (inputRef?.current) {
//         inputRef?.current?.setNativeProps({
//           text: `${valuePrefix}${Math.round(v?.value)}${valueSuffix}`,
//         });
//       }
//       if (value === v?.value) {
//         onAnimationComplete();
//       }
//     });
//     return () => animatedValue.removeAllListeners();
//   }, [value]);

//   return (
//     <View>
//         <View style={{flexDirection:'row'}}>
//                   <Text style={dynamicStyles(styleProps).toptext}>{10 - value/10} more refills to </Text>
//                   <Text style={[dynamicStyles(styleProps).toptext, {fontWeight:'bold',}]}>plant a tree!</Text>
//                   </View>
//                   <Text style={dynamicStyles(styleProps).topSubText}>We plant a tree with every 10 refills</Text>

//       <Svg
//         width={radius * 2}
//         height={radius * 2}
//         viewBox={`0 0 ${halfCircle * 2} ${halfCircle * 2}`}>
//         {activeStrokeSecondaryColor ?
//           <Defs>
//             <LinearGradient id={'grad'} x1="0%" y1="0%" x2="0%" y2="100%">
//               <Stop offset="0%" stopColor={activeStrokeSecondaryColor} />
//               <Stop offset="100%" stopColor={activeStrokeColor} />
//             </LinearGradient>
//           </Defs>
//           : null}

//         <G rotation={'-90'} origin={`${halfCircle}, ${halfCircle}`}>
//           <Circle
//             cx="50%"
//             cy="50%"
//             stroke={inActiveStrokeColor}
//             strokeWidth={inActiveStrokeWidth}
//             r={radius}
//             fill={'transparent'}
//             strokeOpacity={inActiveStrokeOpacity}
//           />
//           <AnimatedCircle
//             ref={circleRef}
//             cx="50%"
//             cy="50%"
//             stroke={activeStrokeSecondaryColor ? `url(#grad)` : activeStrokeColor}
//             strokeWidth={activeStrokeWidth}
//             r={radius}
//             fill={'transparent'}
//             strokeDasharray={circleCircumference}
//             strokeDashoffset={circleCircumference}
//             strokeLinecap={strokeLinecap}
//           />
//         </G>
//       </Svg>
//       {showProgressValue && (
//           <View           style={[StyleSheet.absoluteFillObject, dynamicStyles(styleProps).input, textStyle, dynamicStyles(styleProps).fromProps]}
//           >
//         {/* <AnimatedInput
//           ref={inputRef}
//           underlineColorAndroid={'transparent'}
//           editable={false}
//           defaultValue={`${valuePrefix}0${valueSuffix}`}
//           style={[StyleSheet.absoluteFillObject, dynamicStyles(styleProps).input, textStyle, dynamicStyles(styleProps).fromProps]}
//         /> */}
//         <Text                     style={[StyleSheet.absoluteFillObject, dynamicStyles(styleProps).input, textStyle]}
// >{value/10}</Text>
//         <Text          style={[StyleSheet.absoluteFillObject,  textStyle, dynamicStyles(styleProps).text]}>10 refills</Text>
//         </View>
//       )}
//     </View>
//   );
// };

// export const dynamicStyles = (props) => {
//   return StyleSheet.create({
//     fromProps: {
//       fontSize: props.fontSize ?? props.radius / 2,
//       color: props.textColor ? props.textColor : (props.textStyle && props.textStyle?.color) ? props.textStyle?.color : props.activeStrokeColor,
//     },
//     input: {
//       fontWeight: '900',
//       textAlign: 'center',
//       justifyContent:'center',
//       top: 55,
//       fontSize: 60,
//       color:'#2FBB89',

//     },
//     text:{
//         textAlign: 'center',
//         top: 125


//     },
//     toptext:{
//         color:'#3E4743',
//         textAlign: 'center',
//         fontSize: 20
//     },
//     topSubText:{
//         fontSize:13,
//         textAlign:'center',
//         color:'#878F8C',
//         fontStyle:'italic'
//     }
//   });
// };

// CircularProgress.propTypes = {
//   value: PropTypes.number.isRequired,
//   initialValue: PropTypes.number,
//   radius: PropTypes.number,
//   duration: PropTypes.number,
//   delay: PropTypes.number,
//   textColor: PropTypes.string,
//   textStyle: PropTypes.object,
//   maxValue: PropTypes.number,
//   fontSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
//   strokeLinecap: PropTypes.oneOf(['butt', 'round', 'square']),
//   onAnimationComplete: PropTypes.func,
//   valuePrefix: PropTypes.string,
//   valueSuffix: PropTypes.string,
//   activeStrokeColor: PropTypes.string,
//   activeStrokeSecondaryColor: PropTypes.string,
//   inActiveStrokeColor: PropTypes.string,
//   inActiveStrokeOpacity: PropTypes.number,
//   activeStrokeWidth: PropTypes.number,
//   inActiveStrokeWidth: PropTypes.number,
//   showProgressValue: PropTypes.bool
// };

// CircularProgress.defaultProps = {
//   value: 0,
//   initialValue: 0,
//   radius: 60,
//   duration: 500,
//   delay: 0,
//   maxValue: 100,
//   strokeLinecap: 'round',
//   onAnimationComplete: () => { },
//   valuePrefix: '',
//   valueSuffix: '',
//   textStyle: {},
//   activeStrokeColor: '#2ecc71',
//   activeStrokeSecondaryColor: '',
//   inActiveStrokeColor: 'rgba(0,0,0,0.3)',
//   inActiveStrokeOpacity: 1,
//   activeStrokeWidth: 10,
//   inActiveStrokeWidth: 10,
//   showProgressValue: true
// };

// export default CircularProgress;

{showProgressValue && (
    <View           style={[StyleSheet.absoluteFillObject, dynamicStyles(styleProps).input, textStyle, dynamicStyles(styleProps).fromProps]}
    >

  <Text                     style={[StyleSheet.absoluteFillObject, dynamicStyles(styleProps).input, textStyle]}
>{value/10}</Text>
  <Text          style={[StyleSheet.absoluteFillObject,  textStyle, dynamicStyles(styleProps).text]}>10 refills</Text>
  </View>
)}